# Copyright 2022 by Artem Ustsov
on: push

jobs:
  checking:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: WORKING DIRECTORY
        run: pwd

      - name: INSTALL GCC
        run: |
          sudo apt-get update && sudo apt-get install -y gcc g++
          which gcc

      - name: INSTALL CMAKE
        run: |
          sudo apt-get update && sudo apt-get install -y cmake
          which cmake

      - name: INSTALL CLANG-FORMAT
        run: |
          sudo apt-get update && sudo apt-get install -y clang-format
          which clang

      - name: CLANG-FORMATTING
        run: |
          mkdir -p build && cd build
          sudo cmake -DENABLE_CLANG_FORMAT=ON ..
          sudo make
          sudo make clang-format
          cd ../

      - name: INSTALL CPPLINT
        run: |
          sudo apt-get update && sudo pip install cpplint
          which cpplint

      - name: CPPLINT CHECK
        run: |
          mkdir -p build && cd build
          sudo cmake -DENABLE_CPPLINT=ON ..
          sudo make
          sudo make cpplint
          cd ../

      - name: CPP CHECK
        run: |
          mkdir -p build && cd build
          sudo cmake -DENABLE_CPPCHECK=ON ..
          sudo make
          sudo make check
          cd ../

      - name: INSTALL FBINFER
        run: |
          VERSION=1.0.0; \
            curl -sSL "https://github.com/facebook/infer/releases/download/v$VERSION/infer-linux64-v$VERSION.tar.xz" \
            | sudo tar -C /opt -xJ && \
            sudo ln -s "/opt/infer-linux64-v$VERSION/bin/infer" /usr/local/bin/infer

      - name: FBINFER CHECK
        run: |
          mkdir -p build && cd build
          sudo apt install libncurses5 -y
          sudo cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DENABLE_INFER=ON ..
          sudo make infer
          cd ../

  building:
    runs-on: ubuntu-latest
    needs: [checking]
    steps:

      - uses: actions/checkout@v2
      - name: WORKING DIRECTORY
        run: pwd

      - name: INSTALL GCC
        run: |
          sudo apt-get update && sudo apt-get install -y gcc g++
          which gcc

      - name: INSTALL CMAKE
        run: |
          sudo apt-get update && sudo apt-get install -y cmake
          which cmake

      - name: INSTALL VALGRIND
        run: |
          sudo apt-get update && sudo apt-get install -y valgrind
          which valgrind


      - name: RUN VALGRIND PROGRAMM
        run: |
          mkdir -p build && cd build
          sudo cmake -DBUILD_DYNAMIC=ON ..
          sudo make
          sudo valgrind --tool=memcheck --leak-check=full --leak-resolution=med ./program_options -i 5 -f 253.656 --storage=databse -d 20.33215669 --boolean false
          cd ../

  testing:
    runs-on: ubuntu-latest
    needs: [building]
    steps:

      - uses: actions/checkout@v2
      - name: WORKING DIRECTORY
        run: pwd

      - name: INSTALL GCC
        run: |
          sudo apt-get update && sudo apt-get install -y gcc g++
          which gcc

      - name: INSTALL CMAKE
        run: |
          sudo apt-get update && sudo apt-get install -y cmake
          which cmake

      - name: INSTALL LCOV
        run: |
          sudo apt-get update && sudo apt-get install -y lcov
          which lcov

      - name: INSTALL PIP
        run: |
          sudo apt-get update && sudo apt-get install -y python3-pip
          which python3
          which pip

      - name: INSTALL VALGRIND
        run: |
          sudo apt-get update && sudo apt-get install -y valgrind
          which valgrind

      - name: INSTALL GTEST
        run:  |
          git clone https://github.com/google/googletest
          pwd
          cd ./googletest
          pwd
          mkdir -p build && cd build
          sudo cmake ..
          sudo make
          sudo make install
          cd ../../
          pwd

      - name: UNIT_TEST
        run:  |
          mkdir -p build && cd build
          sudo cmake -DBUILD_DYNAMIC=ON -DBUILD_TESTS=ON ..
          sudo make
          cd test
          sudo ./po_test
          cd ../../

      - name: ADDRESS SANITIZER
        run: |
          mkdir -p build && cd build
          sudo cmake -DBUILD_DYNAMIC=ON -DBUILD_TESTS=ON -DENABLE_ASAN=ON -DENABLE_USAN=OFF -DENABLE_TSAN=OFF ..
          sudo make
          cd test
          sudo ./po_test
          cd ../../

      - name: UNDEFINED SANITIZER
        run: |
          mkdir -p build && cd build
          sudo cmake -DBUILD_DYNAMIC=ON -DBUILD_TESTS=ON -DENABLE_ASAN=OFF -DENABLE_USAN=ON -DENABLE_TSAN=OFF ..
          sudo make
          cd test
          sudo ./po_test
          cd ../../

      - uses: codecov/codecov-action@v2
      - name: CODE COVERAGE
        run: |
          mkdir -p build && cd build
          sudo cmake -DBUILD_DYNAMIC=ON -DBUILD_TESTS=ON -DENABLE_COVERAGE=ON ..
          sudo make
          cd test
          sudo ./po_test
          cd ../
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "${HOME}" '/.cache/*' --output-file coverage.info
          lcov --list coverage.info
          cd ..
          bash <(curl -s https://codecov.io/bash) -f build/coverage.info || echo "CodeCov didn't collect coverage reports"
          cat codecov.yml | curl --data-binary @- https://codecov.io/validate
